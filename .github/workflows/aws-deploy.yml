name: AWS Deployment

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.release.tag_name }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to AWS ECS
        id: deploy-ecs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.release.tag_name }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
        run: |
          # Get the current task definition
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

          # Update the task definition with the new image
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
             '.containerDefinitions[0].image = $IMAGE' \
             task-definition.json > new-task-definition.json

          # Register the new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
                          --cli-input-json file://new-task-definition.json \
                          --query 'taskDefinition.taskDefinitionArn' \
                          --output text)

          # Update the service with the new task definition
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment

      - name: Get public endpoint
        id: get-endpoint
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          PUBLIC_ENDPOINT: ${{ secrets.PUBLIC_ENDPOINT }}
        run: |
          # Wait for service to stabilize
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE

          # Use the predefined public endpoint from secrets
          echo "Public endpoint: $PUBLIC_ENDPOINT"
          echo "endpoint=$PUBLIC_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Create deployment comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const endpoint = '${{ steps.get-endpoint.outputs.endpoint }}';
            const releaseId = context.payload.release.id;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: `${context.payload.release.body}\n\n## Deployment Info\nThe application has been deployed to: ${endpoint}`
            });
