name: AWS EC2 Deployment

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          # Decode the base64-encoded private key
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 -d > ~/.ssh/ec2.pem
          chmod 600 ~/.ssh/ec2.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          # Test SSH connection
          ssh -i ~/.ssh/ec2.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} echo "SSH connection successful"

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          RELEASE_VERSION: ${{ github.event.release.tag_name }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "Starting deployment of Case Management API version $RELEASE_VERSION"

          # Stop and remove existing container if it exists
          if docker ps -a | grep -q case-management-api; then
            echo "Stopping and removing existing container"
            docker stop case-management-api || true
            docker rm case-management-api || true
          fi

          # Pull the latest code
          cd ~/CaseManagement || mkdir -p ~/CaseManagement && cd ~/CaseManagement
          if [ -d ".git" ]; then
            git fetch --all
            git checkout $RELEASE_VERSION
          else
            git clone https://github.com/Laittea/CaseManagement.git .
            git checkout $RELEASE_VERSION
          fi

          # Build and start the Docker container
          echo "Building and starting Docker container"
          docker build -t case-management-api:$RELEASE_VERSION .
          docker run -d -p 8080:8000 --name case-management-api case-management-api:$RELEASE_VERSION

          # Verify the container is running
          echo "Verifying container is running"
          sleep 10
          if docker ps | grep -q case-management-api; then
            echo "Container is running successfully"
          else
            echo "Container failed to start"
            docker logs case-management-api
            exit 1
          fi

          echo "Deployment completed successfully"
          EOF

          # Copy deployment script to EC2 instance
          scp -i ~/.ssh/ec2.pem deploy.sh $EC2_USER@$EC2_HOST:~/deploy.sh

          # Execute deployment script on EC2 instance
          ssh -i ~/.ssh/ec2.pem $EC2_USER@$EC2_HOST "chmod +x ~/deploy.sh && RELEASE_VERSION=$RELEASE_VERSION ~/deploy.sh"

      - name: Get public endpoint
        id: get-endpoint
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_PORT: ${{ secrets.EC2_PORT || '8080' }}
        run: |
          # Use the EC2 instance's public DNS/IP as the endpoint
          ENDPOINT="http://$EC2_HOST:$EC2_PORT"
          echo "Public endpoint: $ENDPOINT"
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT

      - name: Create deployment comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const endpoint = '${{ steps.get-endpoint.outputs.endpoint }}';
            const releaseId = context.payload.release.id;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: `${context.payload.release.body}\n\n## Deployment Info\nThe application has been deployed to: ${endpoint}`
            });

